Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    MemorySize: 128
    Timeout: 30
    Handler: app.lambda_handler
    Runtime: python3.11
    Architectures:
        - x86_64
    Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:40
    Environment:
      Variables:
        LOG_LEVEL: INFO
        openai_key: '{{resolve:ssm:dev__openai:1}}'

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${AWS::StackName} - ${ResourceName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /gen:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addressGenerator.Arn}/invocations
                credentials: !Sub arn:aws:iam::${AWS::AccountId}:role/ApiGatewayInvokeLambdaRole
              responses: {}
          /cleanse/gpt:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addressCleansing.Arn}/invocations
                credentials: !Sub arn:aws:iam::${AWS::AccountId}:role/ApiGatewayInvokeLambdaRole
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: false
      Auth:
        DefaultAuthorizer: auth
        Authorizers:
          auth:
            FunctionArn: !GetAtt auth.Arn
            Identity:
              Header: auth
              ReauthorizeEvery: 300
  auth:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} - ${ResourceName}
        - ResourceName: auth
      CodeUri: src/auth
  authLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/addr-clnse/${auth}
  addressCleansing:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} - ${ResourceName}
        - ResourceName: addressCleansing
      CodeUri: src/cleansing
      Events:
        ApiPOSTcleanse:
          Type: Api
          Properties:
            Path: /cleanse/{proxy+}
            Method: POST
            RestApiId: !Ref Api
      Policies:
        - AWSLambdaBasicExecutionRole
  addressCleansingLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/addr-clnse/${addressCleansing}
  addressGenerator:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} - ${ResourceName}
        - ResourceName: addressGenerator
      CodeUri: src/addrgen
      Events:
        ApiPOSTgen:
          Type: Api
          Properties:
            Path: /gen
            Method: POST
            RestApiId: !Ref Api
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          sys_mpt: As a senior individual, you may struggle with placing the address parts in the correct locations when sending mail to friends.
          usr_mpt: Please provide five [[address_in]] addresses [[language]], including apartment or street numbers, street names, provinces, country, postal codes, and any other relevant information. Please mix up the address format and leave out some details to simulate realistic handwriting. You should return five lines, each containing a complete address. For example, "123 Main St, New York, NY 10001, USA". No other content should be returned. Please do not add sequence numbers to each address.
  addressGeneratorLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/addr-clnse/${addressGenerator}

Outputs:
  auth:
    Description: auth Lambda Function ARN
    Value: !GetAtt auth.Arn
  authIamRole:
    Description: Implicit IAM Role created for auth function
    Value: !GetAtt authRole.Arn
  addressCleansing:
    Description: addressCleansing Lambda Function ARN
    Value: !GetAtt addressCleansing.Arn
  addressCleansingIamRole:
    Description: Implicit IAM Role created for addressCleansing function
    Value: !GetAtt addressCleansingRole.Arn
  addressGenerator:
    Description: addressGenerator Lambda Function ARN
    Value: !GetAtt addressGenerator.Arn
  addressGeneratorIamRole:
    Description: Implicit IAM Role created for addressGenerator function
    Value: !GetAtt addressGeneratorRole.Arn